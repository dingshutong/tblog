{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/async-task-with-cancel","result":{"data":{"markdownRemark":{"id":"81956426-a647-544a-bd68-61cf50e17dad","html":"<p>Sometimes your await process stuck forever and you want to cancel your async/await tasks manually by a cancel button. In such cases, your application must not wait more than a timeout for a response.</p>\n<p>The idea is to use the cancellation token to stop these async tasks. Two types of async tasks are considered here. One is the async webrequest for downloading, the other is async background worker for heavy excutions. </p>\n<h2 id=\"cancel-a-webrequest\" style=\"position:relative;\"><a href=\"#cancel-a-webrequest\" aria-label=\"cancel a webrequest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cancel a webRequest</h2>\n<p>First, create a new extension class</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Extensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>HttpWebResponse<span class=\"token punctuation\">></span></span> <span class=\"token function\">GetResponseAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">HttpWebRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> ct<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HttpWebRequest<span class=\"token punctuation\">)</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">GetResponseAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>HttpWebResponse<span class=\"token punctuation\">)</span>response<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">WebException</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// WebException is thrown when request.Abort() is called,</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n                    <span class=\"token comment\">// the WebException will be available as Exception.InnerException</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OperationCanceledException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">,</span> ct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// Abort not caled, throw the original Exception</span>\n                <span class=\"token keyword\">throw</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then in your usual async webRequest, define a cancellationTokenSource which will be used as reference in your button call. </p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">CancellationTokenSource</span> ctGetResponse<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Object<span class=\"token punctuation\">></span></span> <span class=\"token function\">asyncQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> accept <span class=\"token operator\">=</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">HttpWebRequest</span> req <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HttpWebRequest<span class=\"token punctuation\">)</span>WebRequest<span class=\"token punctuation\">.</span><span class=\"token function\">CreateHttp</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                req<span class=\"token punctuation\">.</span>AutomaticDecompression <span class=\"token operator\">=</span> DecompressionMethods<span class=\"token punctuation\">.</span>GZip <span class=\"token operator\">|</span> DecompressionMethods<span class=\"token punctuation\">.</span>Deflate<span class=\"token punctuation\">;</span>\n                req<span class=\"token punctuation\">.</span>Accept <span class=\"token operator\">=</span> accept<span class=\"token punctuation\">;</span>\n                \n                <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> webResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">GetResponseAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ctGetResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CancellationTokenSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> responseStream <span class=\"token operator\">=</span> webResponse<span class=\"token punctuation\">.</span><span class=\"token function\">GetResponseStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">//  responseStream.Seek(0, SeekOrigin.Begin);</span>\n                            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> streamReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamReader</span><span class=\"token punctuation\">(</span>responseStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">{</span>\n\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> \n            <span class=\"token punctuation\">{</span>\n\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, in your button click event add the cancel awaiter. </p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">simpleButton_cancel_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            ctGetResponse<span class=\"token punctuation\">.</span><span class=\"token function\">Cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/posts/async-task-with-cancel","tagSlugs":["/tag/c/","/tag/async/"]},"frontmatter":{"date":"2021-02-27T22:12","description":"Two types of async tasks are considered, one is the async webrequest for downloading, the other is async background worker for heavy excutions. The idea is to use the cancellation token to stop these async tasks.","tags":["C#","Async"],"title":"Cancel Async Tasks with a Button","socialImage":{"publicURL":"/static/3e20438298edd3a3fa746766d803f379/gutenberg.jpg"}}}},"pageContext":{"slug":"/posts/async-task-with-cancel"}},"staticQueryHashes":["251939775","401334301","825871152"]}